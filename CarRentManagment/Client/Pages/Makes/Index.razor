@page "/makes/"
@using System.Diagnostics

@inject HttpClient _Http
@inject IJSRuntime js
@inject NavigationManager _navMan
<h3 class="card-card-title">Car makes</h3>

<head>
    <style>
        .button-8 {
            background-color: #e1ecf4;
            border-radius: 3px;
            border: 1px solid #7aa7c7;
            box-shadow: rgba(255, 255, 255, .7) 0 1px 0 0 inset;
            box-sizing: border-box;
            color: #39739d;
            cursor: pointer;
            display: inline-block;
            font-family: -apple-system,system-ui,"Segoe UI","Liberation Sans",sans-serif;
            font-size: 13px;
            font-weight: 400;
            line-height: 1.15385;
            margin: 0;
            outline: none;
            padding: 8px .8em;
            position: relative;
            text-align: center;
            text-decoration: none;
            user-select: none;
            -webkit-user-select: none;
            touch-action: manipulation;
            vertical-align: baseline;
            white-space: nowrap;
        }

            .button-8:hover,
            .button-8:focus {
                background-color: #b3d3ea;
                color: #2c5777;
            }

            .button-8:focus {
                box-shadow: 0 0 0 4px rgba(0, 149, 255, .15);
            }

            .button-8:active {
                background-color: #a0c7e4;
                box-shadow: none;
                color: #2c5777;
            }
    </style>
</head>





@if (Elements == null)
{
    <div class="alert alert-info">Loading....</div>
}
else
{
    <div class="form-group">
        <input class="form-control" type="text" placeholder="Filter..."
           @bind="Filter"
           @bind:event="oninput">
    </div>
    <!-- Circle Buttons -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <button class="button-8 font-weight-bold text-primary" role="button" @onclick="(()=>BackClick())">Create new make</button>
        </div>
        <div class="card-body">
            <table class="table table table-hover">
                <thead class="thead-light">
                    <tr>
                        <th scope="col">ID</th>
                        <th scope="col">Name</th>
                        <th scope="col">Created by</th>
                        <th scope="col">UpdatedBy</th>
                        <th scope="col">Data0</th>
                        <th scope="col">Button</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in Elements)
                    {

                        if (!IsVisible(forecast))
                        {
                            continue;
                        }
                        <tr>
                            <td>@forecast.Id</td>
                            <td>@forecast.Name</td>
                            <td>@forecast.CreatedBy</td>
                            <td>@forecast.UpdatedBy</td>
                            <td typeof="data">@forecast.DateCreated</td>
                            <td>
                                <a href="/makes/view" class="btn btn-warning btn-circle btn-sm">
                                    <i class="fas fa-exclamation-triangle"></i>
                                </a>

                                <button class="btn alert-danger btn-circle btn-sm" @onclick="(()=> Delete(forecast.Id))">
                                    <i class="far fa-trash-alt"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    private List<Make>? Elements;
    public string? Filter { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Elements = await _Http.GetFromJsonAsync<List<Make>>(Static.Endpoints.MakesEndpoint);
    }

    private async Task Delete(int id)
    {
        try
        {
            var confirm = await js.InvokeAsync<bool>("confirm", "Do you want delete?");
            if (confirm)
            {
                var back = await _Http.DeleteAsync($"api/Makes/{id}");
                await OnInitializedAsync();
            }
        }
        catch (Exception ex)
        {

        }

    }

    private void BackClick()
    {
        _navMan.NavigateTo("");
    }

    public bool IsVisible(Make forecast)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (forecast.Name != null)
            if (forecast.Name.Contains(Filter, StringComparison.OrdinalIgnoreCase))
                return true;

        return false;
    }
}